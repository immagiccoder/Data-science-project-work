-- IMPORTANT: BEFORE CREATING ANY TABLE, MAKE SURE YOU RUN THIS COMMAND 
ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;

-- Drop table nyc_taxi_data_ha if already exists

	drop table nyc_taxi_data_ha;

-- CREATE TABLE nyc_taxi_data_ha if not exist


create external table if not exists nyc_taxi_data_ha(vendorid int,tpep_pickup_datetime string,tpep_dropoff_datetime string,
passenger_count int,trip_distance double,ratecodeid int,store_and_fwd_flag string,
pulocationid int,dolocationid int,payment_type int,fare_amount double,extra double,mta_tax double,
tip_amount double,tolls_amount double,improvement_surcharge double,total_amount double)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','

location '/common_folder/nyc_taxi_data/'
tblproperties("skip.header.line.count"="2");

--Basic Data Quality Checks

 --Q 1) How many records has each TPEP provider provided? Write a query that summarises the number of records of each provider.

select count(*) from nyc_taxi_data_ha group by vendorid;

--Result-> vendorid-1 (647183 records) vendorid-2(527385 records)

-- Q 2) The data provided is for months November and December only. Check whether the data is consistent, and if not, identify the data quality issues. Mention all
 --data quality issues in comments.

select tpep_pickup_datetime from nyc_taxi_data_ha where month(to_date(tpep_pickup_datetime))not in(11,12);

-- Result-> We found 12 results where six records are of 2017-10-31  one of 01-01-2003,  one of 01-01-2009 and four of 01-01-2018.



EDA Queries-

select count(*) as Total_Records,count(distinct vendorid) as Total_Vendors ,min(to_date(tpep_pickup_datetime)) as oldest_pickup_time,
max(to_date(tpep_pickup_datetime)) as Latest_pickup_time,min(to_date(tpep_dropoff_datetime)) as oldest_Dropping_time,max(to_date(tpep_dropoff_datetime)) as Latest_Dropping_time,
min(passenger_count) as minimum_pessenger_count,max(passenger_count) as maximum_passenger_count,avg(passenger_count) as Average_passenger_count,min(trip_distance) as minimum_distance_trip
,max(trip_distance) as maximum_distance_trip,avg(trip_distance) as average_distance_trip,count(distinct ratecodeid) as number_of_ratecode, count(distinct store_and_fwd_flag) as number_of_storeandfwdflag,
count(distinct pulocationid) as numberof_pickup_Location,count(distinct dolocationid) as number_of_drop_location,count(distinct payment_type) as numberof_payment_type,
avg(tip_amount) as avg_tip_amount,avg(tolls_amount) as avg_toll_amount

from nyc_taxi_data_ha;



-- SELECT TOTAL NUMBER OF PAYMENT TYPE IS CASH
select count(payment_type) as total_no_of_cash_payment 
from nyc_taxi_data_ha
where payment_type=2;

-- SELECT TOTAL NUMBER OF PAYMENT TYPE IS CREDIT CARD
select count(payment_type) as total_no_of_cash_payment
 from nyc_taxi_data_ha
where payment_type=1;

-- SELECT TOTAL NUMBER OF PAYMENT TYPE IS DISPUTED
select count(payment_type) as total_no_of_cash_payment 
from nyc_taxi_data_ha
where payment_type=4;


-- SELECT ROWS WHERE DROPOFF TIME IS LESS THAN PICKUP TIME (Passenger being dropped before pickup or vendor filled wrong data)
select * from nyc_taxi_data_ha where tpep_dropoff_datetime<tpep_pickup_datetime; 

-- RESULT-73 Rows found.

-- SELECT VENDORID WHERE DROPOFF TIME IS LESS THAN PICKUP TIME
select vendorid from nyc_taxi_data_ha where tpep_dropoff_datetime<tpep_pickup_datetime group by vendorid; 

-- RESULT-> Vendorid 1 

--DELETE ROWS WHERE DROPOFF TIME IS LESS THAN PICKUP TIME
delete from nyc_taxi_data_ha where tpep_dropoff_datetime<tpep_pickup_datetime; 

-- SELECT ROWS WHERE PASSENGER COUNT IS LESS THAN 1 ( There was no Passenger for that Trip or vendor filled wrong data)
SELECT passenger_count FROM nyc_taxi_data_ha WHERE passenger_count<1;

-- SELECT VENDORID WHERE PASSENGER COUNT IS LESS THAN 1
SELECT vendorid,count(passenger_count) FROM nyc_taxi_data_ha WHERE passenger_count<1 group by vendorid;

RESULT- Vendorid 1 filled wrong data for Passenger_Count 6813 and Vendorid 2 filled wrong data for Passenger_Count 11

-- SELECT VENDORID WHERE Store_and_fwd_flag='N' that means trip record was not held in vehicle memory before sending to the vendor
select count(vendorid) from nyc_taxi_data_ha where Store_and_fwd_flag='N' group by vendorid;

-- SELECT VENDORID WHERE Store_and_fwd_flag='Y' that means trip record was held in vehicle memory before sending to the vendor
select count(vendorid) from nyc_taxi_data_ha where Store_and_fwd_flag='Y' group by vendorid;

--SELECT RECORDS WHERE TIP AMOUNT IS LESS THAN 0 OR IN NEGATIVE 
select * from nyc_taxi_data_ha where tip_amount<0;
-- RESULT-> FOUR RECORDS FOUND


 

-- PARTITION THE DATA  
-- IMPORTANT: BEFORE PARTITIONING ANY TABLE, MAKE SURE YOU RUN THESE COMMANDS 
SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

 
-- DROP PARTITION TABLE FIRST IF EXISTS


drop table nyc_taxi_data_ha_year_month_partitioned;


-- CREATE PARTITION TABLE
 

create external table if not exists nyc_taxi_data_ha_year_month_partitioned
(VendorID int,tpep_pickup_datetime string,tpep_dropoff_datetime string,passenger_count int,trip_distance 

double,RatecodeID 

int,store_and_fwd_flag string,PULocationID int,DOLocationID int,payment_type int,fare_amount double,extra double,mta_tax double,tip_amount 

double,tolls_amount 

double,improvement_surcharge double,total_amount double) partitioned by (yr int, mnth int)
location '/user/hive/warehouse/nyc_taxi_data_ha1';




-- INSERT DATA INTO nyc_taxi_data_ha_year_month_partitioned

 
insert overwrite table nyc_taxi_data_ha_year_month_partitioned partition(yr, mnth)
select VendorID ,tpep_pickup_datetime ,tpep_dropoff_datetime ,passenger_count ,trip_distance 

,RatecodeID 

,store_and_fwd_flag ,PULocationID ,DOLocationID ,payment_type ,fare_amount ,extra ,mta_tax ,tip_amount 

,tolls_amount 

,improvement_surcharge ,total_amount, year(to_date(tpep_pickup_datetime)) as yr, month(to_date(tpep_pickup_datetime)) as mnth 
from nyc_taxi_data_ha;


--CREATE ORC PARTITION TABLE
ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;

-- First, create ORC table 

create external table if not exists nyc_taxi_data_ha_year_month_partitioned_orc
(VendorID int,tpep_pickup_datetime string,tpep_dropoff_datetime string,passenger_count int,trip_distance double,RatecodeID int,store_and_fwd_flag string,PULocationID int,DOLocationID int,payment_type int,fare_amount double,extra double,mta_tax 

double,tip_amount double,tolls_amount double,improvement_surcharge double,total_amount double) partitioned by (yr int, mnth int)
location '/user/hive/warehouse/nyc_taxi_data_ha1_orc'
tblproperties ("orc.compress"="SNAPPY");

SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

-- Then, write filtered data from partition table into ORC table 

insert overwrite table nyc_taxi_data_ha_year_month_partitioned_orc partition(yr , mnth)

select * from nyc_taxi_data_ha_year_month_partitioned

where year(to_date(tpep_pickup_datetime)) in (2017) and

month(to_date(tpep_pickup_datetime)) in (11,12) and

passenger_count>0 and

fare_amount>0 and

trip_distance>0 and

extra in (0,0.5,1) and

mta_tax in (0,0.5) and

tip_amount>0 and

tolls_amount>0 and

improvement_surcharge in (0,0.3);



--ANALYSIS I

--1) Compare the overall average fare per trip for November and December.
SELECT AVG(fare_amount) from nyc_taxi_data_ha_year_month_partitioned_orc where month(to_date(tpep_pickup_datetime)) in (11,12);

--RESULT-> 40.52

--2)Explore the ‘number of passengers per trip’ - how many trips are made by each level of ‘Passenger_count’? Do most people travel solo or with other people?
select passenger_count,count(passenger_count) as Passenger_per_trip from nyc_taxi_data_ha_year_month_partitioned_orc group by passenger_count;

--RESULT-> PASSENGER_COUNT (1) 29433 (2)6909 (3)1782 (4)850 (5)2147 (6)1279 (7)1

--3)Which is the most preferred mode of payment?
select payment_type,count(payment_type) as payment_count from nyc_taxi_data_ha_year_month_partitioned_orc group by payment_type;

-- RESULT-> payment type 1 is most prefered mode 42399 passenger made payment by Credit Card.

--4)What is the average tip paid per trip? Compare the average tip with the 25th, 50th and 75th percentiles and comment whether the ‘average tip’ is a representative --statistic (of the central tendency) of ‘tip amount paid’. Hint: You may use percentile_approx(DOUBLE col, p): Returns an approximate pth percentile of a numeric 
--column (including floating point types) in the group.

-- 25,50,75 PERCENT TIP AMOUNT
select avg(tip_amount) as Avg_Tip_Amount,percentile_approx(tip_amount,array(0.25,0.50,0.75)) from nyc_taxi_data_ha_year_month_partitioned_orc;  --6.80, 8.67, 11.68



-- AVG TIP AMOUNT
select avg(tip_amount) from nyc_taxi_data_ha_year_month_partitioned_orc;    --9.15

-- RESULT-> AVG TIP AMOUNT 9.15 IS NOT EQUAL TO 50 PERCENT TIP AMOUNT 8.67 SO ITS NOT THE CENTRAL TENDENCY

--5) Explore the ‘Extra’ (charge) variable - what fraction of total trips have an extra charge is levied?
select (sum(if(extra>0,1,0))/count(*))/100 from nyc_taxi_data_ha_year_month_partitioned_orc;

-- RESULT 0.0029


--ANALYSIS II

--1) What is the correlation between the number of passengers on any given trip, and the tip paid per trip? Do multiple travellers tip more compared to solo 
--travellers? Hint: Use CORR(Col_1, Col_2)

select CORR(p,t) as co_p_t from (count(distinct passenger_count) as p,count(distinct tip_amount)  as t from nyc_taxi_data_ha_year_month_partitioned_orc) a;

-- RESULT-> -0.004338

--2)Segregate the data into five segments of ‘tip paid’: [0-5), [5-10), [10-15) , [15-20) and >=20. Calculate the percentage share of each bucket (i.e. the fraction of --trips falling in each bucket).
-- BUCKETING THE DATA

-- First drop the table 
drop table nyc_taxi_data_ha_year_month_partitioned_clustered;



 -- Then create external table 

create external table if not exists nyc_taxi_data_ha_year_month_partitioned_clustered


(VendorID int,tpep_pickup_datetime string,tpep_dropoff_datetime string,passenger_count 

int,trip_distance double,RatecodeID int,store_and_fwd_flag string,PULocationID int,DOLocationID int,payment_type int,fare_amount double,extra double,mta_tax 

double,tip_amount double,tolls_amount double,improvement_surcharge double,total_amount double)
 partitioned by (yr int, mnth int)

clustered by (tip_amount) into 5 buckets

location '/user/hive/warehouse/nyc_taxi_data_ha_clustered1';



SET hive.exec.max.dynamic.partitions=100000;

SET hive.exec.max.dynamic.partitions.pernode=100000;

-- INSERT DATA INTO BUCKET



insert overwrite table nyc_taxi_data_ha_year_month_partitioned_clustered
 partition(yr , mnth)


select * from nyc_taxi_data_ha_year_month_partitioned


where year(to_date(tpep_pickup_datetime)) in (2017) and


month(to_date(tpep_pickup_datetime)) in (11,12) and


passenger_count>0 and


fare_amount>0 and


trip_distance>0 and


extra in (0,0.5,1) and


mta_tax in (0,0.5) and


tip_amount>0 and


tolls_amount>0 and


improvement_surcharge in (0,0.3);

select tip_bucket,count(*) as num_records, max(records_count) as total_records,round(count(*)/max(records_count),5) as tip_bucket_fraction
from ( select cluster_tbl.*,count(*) over() records_count,
case when tip_amount>=0 and tip_amount<5 then '0_Bucket_5'
when tip_amount>=5 and tip_amount<10 then '5_Bucket_10'
when tip_amount>=10 and tip_amount<15 then '10_Bucket_15'
when tip_amount>=15 and tip_amount<20 then '15_Bucket_20'
else '20above_bucket'
end as tip_bucket
from nyc_taxi_data_ha_year_month_partitioned_clustered cluster_tbl) as sub_table
group by tip_bucket
order by tip_bucket_fraction desc;



--RESULT-> [0-5] bucket have 7 percent,[5-10] bucket have 55 percent,[10-15] bucket have 32 percent,[15-20] bucket have 4 percent,[>20] bucket have 2 percent,



--3)Which month has a greater average ‘speed’ - November or December? Note that the variable ‘speed’ will have to be derived from other metrics. Hint: You have columns --for distance and time.

-- AVG SPEED FOR NOVEMBER MONTH

select avg(trip_distance/trip_time) from 
(select trip_distance,hour(tpep_dropoff_datetime)-hour(tpep_pickup_datetime) as trip_time from nyc_taxi_data_ha_year_month_partitioned_clustered 
where month(tpep_pickup_datetime)=11) a;

-- RESULT-> 12.74 

-- AVG SPEED FOR DECEMBER MONTH

select avg(trip_distance/trip_time) from 
(select trip_distance,hour(tpep_dropoff_datetime)-hour(tpep_pickup_datetime) as trip_time from nyc_taxi_data_ha_year_month_partitioned_clustered 
where month(tpep_pickup_datetime)=12) a;

-- RESULT-> 12.73  

--OVERALL RESULT-> NOVEMBER MONTH HAS A 0.01 GREATER AVERAGE SPEED

--4)Analyse the average speed of the most happening days of the year, i.e. 31st December (New year’s eve) and 25th December (Christmas) and compare it with the overall average. 

select avg(trip_distance/trip_time) from 
(select trip_distance,hour(tpep_dropoff_datetime)-hour(tpep_pickup_datetime) as trip_time from nyc_taxi_data_ha_year_month_partitioned_clustered 
where day(tpep_pickup_datetime)in(25,31) and year(tpep_dropoff_datetime) in (2017,2018)) a;

-- RESULT-> 13.81























 















